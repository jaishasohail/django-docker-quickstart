name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install -r src/requirements.dev.txt

  lint-security:
    runs-on: ubuntu-latest
    needs: build-install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.dev.txt
      - name: Lint
        run: bash scripts/lint.sh
      - name: Security Scan
        run: pip install bandit && bandit -r src/project_name

  test:
    runs-on: ubuntu-latest
    needs: lint-security
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: postgres://test_user:test_pass@localhost:5432/test_db
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install -r src/requirements.dev.txt
      - name: Wait for DB
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do sleep 1; done
      - name: Run tests
        run: bash scripts/test.sh

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -f deployment/Dockerfile -t myproject:latest .

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Add your deployment steps here, e.g., push to registry or deploy to server
      - name: Deploy (placeholder)
        run: echo "Deploying to production..."
